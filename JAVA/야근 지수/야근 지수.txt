import java.util.PriorityQueue;
import java.util.Collections;

class Solution {
    public long solution(int n, int[] works) {
        // 큰 거부터 내림차순으로 정렬되게 생성
        PriorityQueue<Integer> q = new PriorityQueue<>(Collections.reverseOrder());

        // 큐에 값 넣기
        for (int i = 0; i < works.length; i++) {
            q.offer(works[i]);
        }
        
        for (int i = 0; i < n; i++) {
            // 큐에서 값 빼기
            int max = q.poll();
            // 가장 큰 값이 0보다 작으면 더 탐색 필요없음
            if (max <= 0)
                break;
            // 아니라면 큐에서 젤 큰 값에서 1 빼주기
            q.offer(max - 1);
        }
        
        long tired = 0;
        // 큐가 빌 때까지
        while (!q.isEmpty()) {
            int k = q.poll();
            // 남은 작업의 제곱을 더하기
            tired += k * k; 
        }
        
        return tired;
    }    
}